#!/bin/bash

# Test script for output distribution system
set -e

# Source the action script functions (without executing the main logic)
# We'll create a test version that only includes the functions we need

# Create a minimal test environment
export GITHUB_STEP_SUMMARY="/tmp/test_step_summary"
export GITHUB_EVENT_NAME="pull_request"
export GITHUB_EVENT_PATH="/tmp/test_event.json"
export GITHUB_REPOSITORY="test/repo"
export GITHUB_WORKFLOW="test-workflow"
export GITHUB_JOB="test-job"
export GITHUB_RUN_ID="123456"
export GITHUB_SERVER_URL="https://github.com"
export COMMENT_ON_PR="true"
export UPDATE_COMMENT="false"
export COMMENT_HEADER="🏗️ Test Plan Summary"

# Mock statistics
export HAS_CHANGES="true"
export HAS_DANGERS="false"
export CHANGE_COUNT="5"
export DANGER_COUNT="0"
export ADD_COUNT="3"
export CHANGE_COUNT_DETAIL="1"
export DESTROY_COUNT="0"
export REPLACE_COUNT="1"

# Create test event file
echo '{"pull_request": {"number": 123}}' > "$GITHUB_EVENT_PATH"

# Clear step summary file
> "$GITHUB_STEP_SUMMARY"

# Test function definitions (extracted from action.sh)
log() {
  echo "::group::$1" >&2
  shift
  echo "$@" >&2
  echo "::endgroup::" >&2
}

warning() {
  echo "::warning::$1" >&2
}

set_output() {
  echo "OUTPUT: $1=$2"
}

process_markdown_for_context() {
  local context=$1
  local content="$2"
  
  case "$context" in
    "step-summary")
      echo "# $COMMENT_HEADER"
      echo ""
      echo "$content"
      echo ""
      echo "## Workflow Info"
      echo "- Repository: $GITHUB_REPOSITORY"
      echo "- Workflow: $GITHUB_WORKFLOW"
      ;;
    "pr-comment")
      echo "## $COMMENT_HEADER"
      echo ""
      echo "<!-- strata-comment-id: $GITHUB_WORKFLOW-$GITHUB_JOB -->"
      echo ""
      echo "$content"
      echo ""
      echo "---"
      echo "*Generated by Strata*"
      ;;
    *)
      echo "$content"
      ;;
  esac
}

optimize_content_for_context() {
  local context=$1
  cat  # For testing, just pass through
}

sanitize_github_content() {
  local content="$1"
  echo "$content"  # For testing, just pass through
}

post_pr_comment() {
  local pr_number=$1
  local comment_body="$2"
  
  echo "PR COMMENT for PR #$pr_number:"
  echo "================================"
  echo "$comment_body"
  echo "================================"
}

# Test the distribute_output function
distribute_output() {
  local stdout_output="$1"
  local markdown_content="$2"
  
  log "Starting output distribution" "Stdout size: $(echo "$stdout_output" | wc -c) chars, Markdown size: $(echo "$markdown_content" | wc -c) chars"
  
  # Prepare base content with statistics for both contexts
  local base_content=""
  
  # Add plan status indicators
  if [ "$HAS_CHANGES" = "true" ]; then
    if [ "$HAS_DANGERS" = "true" ]; then
      base_content="⚠️ **Plan contains changes with potential risks**

"
    else
      base_content="✅ **Plan contains changes**

"
    fi
  else
    base_content="ℹ️ **Plan contains no changes**

"
  fi
  
  # Add statistics summary table for step summary
  local step_summary_stats="## Statistics Summary
| TO ADD | TO CHANGE | TO DESTROY | REPLACEMENTS | HIGH RISK |
|--------|-----------|------------|--------------|----------|
| $ADD_COUNT | $CHANGE_COUNT_DETAIL | $DESTROY_COUNT | $REPLACE_COUNT | $DANGER_COUNT |

"
  
  # Add PR comment statistics (more compact format)
  local pr_comment_stats="**Statistics:**
- 📝 **Changes**: $CHANGE_COUNT
- ⚠️ **Dangerous**: $DANGER_COUNT
- 🔄 **Replacements**: $REPLACE_COUNT

"
  
  # Prepare main content section
  local main_content_section="## Resource Changes
"
  if [ -n "$markdown_content" ]; then
    main_content_section="${main_content_section}${markdown_content}"
  else
    main_content_section="${main_content_section}${stdout_output}"
  fi
  main_content_section="${main_content_section}

"
  
  # Write to GitHub Step Summary using processed markdown content
  if [ -n "$GITHUB_STEP_SUMMARY" ]; then
    log "Writing to GitHub Step Summary"
    
    # Prepare step summary content
    local step_summary_content="${base_content}${step_summary_stats}${main_content_section}"
    
    # Process content for step summary context
    local processed_step_summary
    processed_step_summary=$(process_markdown_for_context "step-summary" "$step_summary_content")
    
    # Optimize and sanitize content
    local optimized_step_summary
    optimized_step_summary=$(echo "$processed_step_summary" | optimize_content_for_context "step-summary")
    local sanitized_step_summary
    sanitized_step_summary=$(sanitize_github_content "$optimized_step_summary")
    
    # Write to step summary
    echo "$sanitized_step_summary" >> "$GITHUB_STEP_SUMMARY"
    log "Step summary written successfully" "Size: $(echo "$sanitized_step_summary" | wc -c) chars"
  else
    log "GitHub Step Summary not available, skipping step summary output"
  fi
  
  # Handle PR comments if enabled
  if [ "$COMMENT_ON_PR" = "true" ] && [ "$GITHUB_EVENT_NAME" = "pull_request" ]; then
    log "Preparing PR comment"
    
    # Extract PR number from GitHub event
    local pr_number
    pr_number=$(jq -r .pull_request.number "$GITHUB_EVENT_PATH" 2>/dev/null)
    
    if [ -n "$pr_number" ] && [ "$pr_number" != "null" ]; then
      # Prepare PR comment content (more compact than step summary)
      local pr_comment_content="${base_content}${pr_comment_stats}**Plan Summary:**
"
      
      # Use markdown content if available, otherwise use stdout
      if [ -n "$markdown_content" ]; then
        pr_comment_content="${pr_comment_content}${markdown_content}"
      else
        pr_comment_content="${pr_comment_content}${stdout_output}"
      fi
      
      # Process content for PR comment context
      local processed_pr_comment
      processed_pr_comment=$(process_markdown_for_context "pr-comment" "$pr_comment_content")
      
      # Optimize and sanitize content
      local optimized_pr_comment
      optimized_pr_comment=$(echo "$processed_pr_comment" | optimize_content_for_context "pr-comment")
      local sanitized_pr_comment
      sanitized_pr_comment=$(sanitize_github_content "$optimized_pr_comment")
      
      # Post the PR comment
      post_pr_comment "$pr_number" "$sanitized_pr_comment"
    else
      warning "Could not determine PR number, skipping PR comment"
    fi
  else
    log "PR commenting disabled or not in pull request context"
  fi
  
  # Set action outputs with appropriate content for each output type
  log "Setting action outputs"
  set_output "summary" "$stdout_output"
  set_output "has-changes" "$HAS_CHANGES"
  set_output "has-dangers" "$HAS_DANGERS"
  set_output "json-summary" "$JSON_OUTPUT"
  set_output "change-count" "$CHANGE_COUNT"
  set_output "danger-count" "$DANGER_COUNT"
  
  # Set markdown content as additional output for GitHub features
  if [ -n "$markdown_content" ]; then
    set_output "markdown-summary" "$markdown_content"
    log "Markdown summary output set" "Size: $(echo "$markdown_content" | wc -c) chars"
  fi
  
  log "Output distribution completed successfully"
}

# Test data
TEST_STDOUT_OUTPUT="| Resource | Action | Risk |
|----------|--------|------|
| aws_instance.web | create | low |
| aws_s3_bucket.data | update | medium |"

TEST_MARKDOWN_CONTENT="## Terraform Plan Summary

### Resources to Add (3)
- aws_instance.web
- aws_security_group.web
- aws_s3_bucket.data

### Resources to Change (1)
- aws_instance.app (configuration update)

### Resources to Replace (1)
- aws_db_instance.main (instance type change)"

echo "Testing output distribution system..."
echo "===================================="

# Run the test
distribute_output "$TEST_STDOUT_OUTPUT" "$TEST_MARKDOWN_CONTENT"

echo ""
echo "Step Summary Content:"
echo "===================="
cat "$GITHUB_STEP_SUMMARY"

echo ""
echo "Test completed successfully!"

# Cleanup
rm -f "$GITHUB_EVENT_PATH" "$GITHUB_STEP_SUMMARY"